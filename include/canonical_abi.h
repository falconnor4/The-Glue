#ifndef CANONICAL_ABI_H
#define CANONICAL_ABI_H

#include <stddef.h> // For size_t
#include <ffi.h>    // For libffi types

#ifdef __cplusplus
extern "C" {
#endif

// Represents the basic C data types that we can handle.
typedef enum {
    C_TYPE_UNKNOWN = 0,
    C_TYPE_VOID,
    C_TYPE_CHAR,
    C_TYPE_SHORT,
    C_TYPE_INT,
    C_TYPE_LONG,
    C_TYPE_FLOAT,
    C_TYPE_DOUBLE,
    C_TYPE_POINTER,
    C_TYPE_STRUCT, // For PoC, structs will be passed by reference (as pointers)
} CType;

// Describes a single member of a native C struct.
// This metadata will be generated by the shim generator tool.
typedef struct {
    const char* name; // Member name, e.g., "field1"
    CType type;       // The C type of the member
    size_t offset;    // Offset of the member within the native struct (from offsetof)
    size_t size;      // Size of the member in the native struct (from sizeof)
} CanonicalMember;

// Describes a native C struct.
// This metadata will be generated by the shim generator tool.
typedef struct {
    const char* name;          // Struct name, e.g., "MyStruct"
    size_t native_size;        // Total size of the native struct (from sizeof)
    size_t canonical_size;     // Total size of the struct in our canonical format
    int num_members;           // Number of members in the struct
    const CanonicalMember* members; // Array of members
    ffi_type ffi_type_struct;  // libffi's representation of the struct
} CanonicalStruct;


/**
 * @brief Marshals a native C struct into a canonical byte buffer.
 *
 * The canonical format is simply a tightly packed representation of the struct members
 * in the order they are defined.
 *
 * @param cs A pointer to the CanonicalStruct descriptor.
 * @param native_struct_ptr A pointer to the instance of the native C struct.
 * @param buffer The destination buffer for the canonical data.
 * @param buffer_size The size of the destination buffer.
 * @return The number of bytes written to the buffer, or 0 on error (e.g., buffer too small).
 */
size_t marshal_struct(const CanonicalStruct* cs, const void* native_struct_ptr, char* buffer, size_t buffer_size);

/**
 * @brief Unmarshals a canonical byte buffer into a native C struct.
 *
 * This function reconstructs the native C struct in memory from the tightly packed
 * canonical representation.
 *
 * @param cs A pointer to the CanonicalStruct descriptor.
 * @param buffer A pointer to the buffer containing the canonical data.
 * @param buffer_size The size of the canonical data in the buffer.
 * @param native_struct_ptr The destination pointer for the reconstructed native C struct.
 * @return The number of bytes read from the buffer, or 0 on error (e.g., native struct ptr is null).
 */
size_t unmarshal_struct(const CanonicalStruct* cs, const char* buffer, size_t buffer_size, void* native_struct_ptr);

// Describes a C function signature.
typedef struct {
    const char* name;
    CType return_type;
    int num_args;
    const CType* arg_types;
} CanonicalFunction;

// A union to hold the result of a function call.
typedef union {
    long long_val;
    double double_val;
    void* ptr_val;
} CanonicalResult;

/**
 * @brief Dynamically calls a native C function using a canonical representation.
 *
 * @param cf A pointer to the CanonicalFunction descriptor.
 * @param func_ptr A pointer to the function to call.
 * @param args_buffer A buffer containing the arguments in the canonical (packed) format.
 * @param result A pointer to a CanonicalResult union to store the return value.
 * @return 0 on success, -1 on error.
 */
int call_function(const CanonicalFunction* cf, void (*func_ptr)(), const char* args_buffer, CanonicalResult* result);


#ifdef __cplusplus
}
#endif

#endif // CANONICAL_ABI_H
